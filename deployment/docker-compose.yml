services:
  postgres:
    image: postgres:15-alpine
    container_name: transcode-postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=transcode_db
      - POSTGRES_USER=transcode_user
      - POSTGRES_PASSWORD=transcode_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U transcode_user -d transcode_db" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.cuda
    container_name: transcode-api
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://transcode_user:transcode_pass@postgres:5432/transcode_db
      
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8087

      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      
      # Shared Volume Configuration
      - SHARED_VOLUME_PATH=/shared/media
      
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ENDPOINT_PUBLIC_URL=${AWS_ENDPOINT_PUBLIC_URL}
      - AWS_BASE_FOLDER=${AWS_BASE_FOLDER}
      
      # Google Cloud Configuration
      - GOOGLE_APPLICATION_CREDENTIALS=/app/key.json
      
      # Google Cloud Pub/Sub Configuration
      - PUBSUB_PROJECT_ID=${PUBSUB_PROJECT_ID}
      - PUBSUB_TASKS_TOPIC=${PUBSUB_TASKS_TOPIC}
      - TASKS_SUBSCRIPTION=${TASKS_SUBSCRIPTION}
      - PUBSUB_RESULTS_TOPIC=${PUBSUB_RESULTS_TOPIC}
      - PUBSUB_RESULTS_SUBSCRIPTION=${PUBSUB_RESULTS_SUBSCRIPTION}
      - PUBSUB_PUBLISHER_CREDENTIALS_PATH=/app/key.json
      - PUBSUB_SUBSCRIBER_CREDENTIALS_PATH=/app/key.json
      - DISABLE_PUBSUB=${DISABLE_PUBSUB:-true}
      
      # Face Detection Pub/Sub Configuration
      - PUBSUB_FACE_DETECTION_TASKS_TOPIC=${PUBSUB_FACE_DETECTION_TASKS_TOPIC:-face-detection-worker-tasks}
      - PUBSUB_FACE_DETECTION_RESULTS_TOPIC=${PUBSUB_FACE_DETECTION_RESULTS_TOPIC:-face-detection-worker-results}
      - PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION=${PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION:-face-detection-worker-results-sub}
    volumes:
      - ../src/transcode_service/key.json:/app/key.json:ro
      - ./logs:/app/logs
      - /tmp/transcode:/tmp/transcode  # Shared temp directory
      - shared-media:/shared/media     # Shared volume for downloaded media files
    restart: always

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    # Health check with longer timeout for GPU initialization
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8087/health" ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  consumer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.cuda
    container_name: transcode-consumer
    command: [ "python", "-m", "transcode_service.workers.transcode_worker" ]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://transcode_user:transcode_pass@postgres:5432/transcode_db

      - FFMPEG_HWACCEL=auto
      - FFMPEG_GPU_ENABLED=auto
      
      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      
      # Shared Volume Configuration
      - SHARED_VOLUME_PATH=/shared/media
      
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ENDPOINT_PUBLIC_URL=${AWS_ENDPOINT_PUBLIC_URL}
      - AWS_BASE_FOLDER=${AWS_BASE_FOLDER}
      
      # Google Cloud Configuration
      - GOOGLE_APPLICATION_CREDENTIALS=/app/key.json
      
      # Google Cloud Pub/Sub Configuration
      - PUBSUB_PROJECT_ID=${PUBSUB_PROJECT_ID}
      - PUBSUB_TASKS_TOPIC=${PUBSUB_TASKS_TOPIC}
      - TASKS_SUBSCRIPTION=${TASKS_SUBSCRIPTION}
      - PUBSUB_RESULTS_TOPIC=${PUBSUB_RESULTS_TOPIC}
      - PUBSUB_RESULTS_SUBSCRIPTION=${PUBSUB_RESULTS_SUBSCRIPTION}
      - PUBSUB_PUBLISHER_CREDENTIALS_PATH=/app/key.json
      - PUBSUB_SUBSCRIBER_CREDENTIALS_PATH=/app/key.json
      - DISABLE_PUBSUB=${DISABLE_PUBSUB:-true}
      
      # Face Detection Pub/Sub Configuration
      - PUBSUB_FACE_DETECTION_TASKS_TOPIC=${PUBSUB_FACE_DETECTION_TASKS_TOPIC:-face-detection-worker-tasks}
      - PUBSUB_FACE_DETECTION_RESULTS_TOPIC=${PUBSUB_FACE_DETECTION_RESULTS_TOPIC:-face-detection-worker-results}
      - PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION=${PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION:-face-detection-worker-results-sub}
    volumes:
      - ../src/transcode_service/key.json:/app/key.json:ro
      - ./logs:/app/logs
      - /tmp/transcode:/tmp/transcode  # Shared temp directory
      - shared-media:/shared/media     # Shared volume for downloaded media files
    restart: always
    # GPU runtime (will be ignored if not available)
    # GPU runtime for face detection
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  face-detection-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.cuda
    container_name: transcode-face-detection-worker
    command: [ "python", "-m", "transcode_service.workers.face_detect_worker" ]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://transcode_user:transcode_pass@postgres:5432/transcode_db
      
      # GPU Configuration for face detection
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=video,compute,utility

      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      
      # Shared Volume Configuration
      - SHARED_VOLUME_PATH=/shared/media
      
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ENDPOINT_PUBLIC_URL=${AWS_ENDPOINT_PUBLIC_URL}
      - AWS_BASE_FOLDER=${AWS_BASE_FOLDER}
      
      # Google Cloud Configuration
      - GOOGLE_APPLICATION_CREDENTIALS=/app/key.json
      
      # Google Cloud Pub/Sub Configuration
      - PUBSUB_PROJECT_ID=${PUBSUB_PROJECT_ID}
      - PUBSUB_TASKS_TOPIC=${PUBSUB_TASKS_TOPIC}
      - TASKS_SUBSCRIPTION=${TASKS_SUBSCRIPTION}
      - PUBSUB_RESULTS_TOPIC=${PUBSUB_RESULTS_TOPIC}
      - PUBSUB_RESULTS_SUBSCRIPTION=${PUBSUB_RESULTS_SUBSCRIPTION}
      - PUBSUB_PUBLISHER_CREDENTIALS_PATH=/app/key.json
      - PUBSUB_SUBSCRIBER_CREDENTIALS_PATH=/app/key.json
      - DISABLE_PUBSUB=${DISABLE_PUBSUB:-true}
      
      # Face Detection Pub/Sub Configuration
      - PUBSUB_FACE_DETECTION_TASKS_TOPIC=${PUBSUB_FACE_DETECTION_TASKS_TOPIC:-face-detection-worker-tasks}
      - PUBSUB_FACE_DETECTION_RESULTS_TOPIC=${PUBSUB_FACE_DETECTION_RESULTS_TOPIC:-face-detection-worker-results}
      
      # Face Detection Configuration
      - FACE_DETECTION_SUBSCRIPTION=${FACE_DETECTION_SUBSCRIPTION:-face-detection-worker-tasks-sub}
      - ORT_LOGGING_LEVEL=4
    volumes:
      - ../src/transcode_service/key.json:/app/key.json:ro
      - ./logs:/app/logs
      - ../src/transcode_service/models_faces:/app/src/transcode_service/models_faces  # Mount face detection models
      - /tmp/transcode:/tmp/transcode  # Shared temp directory
      - shared-media:/shared/media     # Shared volume for downloaded media files
    restart: always
    # GPU runtime for face detection
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  task-listener:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.cuda
    container_name: transcode-task-listener
    command: [ "python", "-m", "transcode_service.workers.task_listener" ]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://transcode_user:transcode_pass@postgres:5432/transcode_db
      
      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONHASHSEED=random
      
      # Shared Volume Configuration
      - SHARED_VOLUME_PATH=/shared/media
      
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ENDPOINT_PUBLIC_URL=${AWS_ENDPOINT_PUBLIC_URL}
      - AWS_BASE_FOLDER=${AWS_BASE_FOLDER}
      
      # Google Cloud Configuration
      - GOOGLE_APPLICATION_CREDENTIALS=/app/key.json
      
      # Google Cloud Pub/Sub Configuration
      - PUBSUB_PROJECT_ID=${PUBSUB_PROJECT_ID}
      - PUBSUB_TASKS_TOPIC=${PUBSUB_TASKS_TOPIC}
      - TASKS_SUBSCRIPTION=${TASKS_SUBSCRIPTION}
      - PUBSUB_RESULTS_TOPIC=${PUBSUB_RESULTS_TOPIC}
      - PUBSUB_RESULTS_SUBSCRIPTION=${PUBSUB_RESULTS_SUBSCRIPTION}
      - PUBSUB_PUBLISHER_CREDENTIALS_PATH=/app/key.json
      - PUBSUB_SUBSCRIBER_CREDENTIALS_PATH=/app/key.json
      - DISABLE_PUBSUB=${DISABLE_PUBSUB:-true}
      
      # Face Detection Pub/Sub Configuration
      - PUBSUB_FACE_DETECTION_TASKS_TOPIC=${PUBSUB_FACE_DETECTION_TASKS_TOPIC:-face-detection-worker-tasks}
      - PUBSUB_FACE_DETECTION_RESULTS_TOPIC=${PUBSUB_FACE_DETECTION_RESULTS_TOPIC:-face-detection-worker-results}
      - PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION=${PUBSUB_FACE_DETECTION_RESULTS_SUBSCRIPTION:-face-detection-worker-results-sub}
      
      # Task Listener Configuration
      - PUBSUB_TASK_SUBSCRIPTION=${PUBSUB_TASK_SUBSCRIPTION:-skl-transcode-cms-tasks-sub}
      - PUBSUB_MAX_MESSAGES=${PUBSUB_MAX_MESSAGES:-10}
    volumes:
      - ../src/transcode_service/key.json:/app/key.json:ro
      - ./logs:/app/logs
      - shared-media:/shared/media     # Shared volume for downloaded media files
    restart: always
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: transcode-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  app-local:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.cuda
    container_name: transcode-app-local
    ports:
      - "5001:5001"
    working_dir: /app/app_local
    command: ["python", "unified_media_server.py"]
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Flask Configuration
      - FLASK_APP=unified_media_server.py
      - FLASK_ENV=development
      
      # Performance optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # FFmpeg Configuration
      - FFMPEG_HWACCEL=auto
      - FFMPEG_GPU_ENABLED=auto
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - FFPROBE_PATH=/usr/bin/ffprobe
    volumes:
      - ../src/transcode_service/key.json:/app/key.json:ro
      - shared-media:/shared/media
      # Mount app_local directory for uploads/outputs
      - ../app_local/temp_uploads:/app/app_local/temp_uploads
      - ../app_local/videos:/app/app_local/videos
      - ../app_local/transcode_output:/app/app_local/transcode_output
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

volumes:
  postgres_data:
  shared-media:
    driver: local

